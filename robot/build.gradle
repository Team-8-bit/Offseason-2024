import edu.wpi.first.gradlerio.GradleRIOPlugin

plugins {
    id("java")
    id("edu.wpi.first.GradleRIO").version("2024.2.1")
    id("org.jetbrains.kotlin.jvm").version("1.9.21")
    id("com.google.devtools.ksp").version("1.9.21-1.0.15")
}

def ROBOT_MAIN_CLASS = "org.team9432.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamOrDefault(9432)
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {}

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

repositories {
    mavenLocal()
    maven { url = "https://SleipnirGroup.github.io/ChoreoLib/dep" }
    maven { url = "https://maven.ctr-electronics.com/release/" }
    maven { url = "https://maven.photonvision.org/repository/internal" }
    maven { url = "https://maven.photonvision.org/repository/snapshots" }
    maven { url = "https://maven.revrobotics.com/" }
    maven { url = "https://jitpack.io" }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

dependencies {
    implementation("org.team9432.lib:robot-lib")

    wpi.java.deps.wpilib().forEach { implementation(it) }
    wpi.java.vendor.java().forEach { implementation(it) }

    wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio).forEach { roborioDebug(it) }
    wpi.java.vendor.jniDebug(wpi.platforms.roborio).forEach { roborioDebug(it) }

    wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio).forEach { roborioRelease(it) }
    wpi.java.vendor.jniRelease(wpi.platforms.roborio).forEach { roborioRelease(it) }

    wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop).forEach { nativeDebug(it) }
    wpi.java.vendor.jniDebug(wpi.platforms.desktop).forEach { nativeDebug(it) }
    wpi.sim.enableDebug().forEach { simulationDebug(it) }

    wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop).forEach { nativeRelease(it) }
    wpi.java.vendor.jniRelease(wpi.platforms.desktop).forEach { nativeRelease(it) }

    wpi.sim.enableRelease().forEach { simulationRelease(it) }

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1-Beta")

    // Choreolib
    implementation("com.choreo.lib:ChoreoLib-java:2024.2.3")
    implementation("com.google.code.gson:gson:2.10.1")

    // Phoenix 6
    implementation("com.ctre.phoenix6:wpiapi-java:24.3.0")

    // Photonvision
    implementation("org.photonvision:photonlib-java:v2024.3.1")
    implementation("org.photonvision:photontargeting-java:v2024.3.1")

    // REVLib
    implementation("com.revrobotics.frc:REVLib-java:2024.2.1")

    // DogLog
    implementation("com.github.jonahsnider:doglog:2024.5.8")
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation().defaultEnabled = true

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks.withType(JavaCompile).configureEach {
    // Configure string concat to always inline compile
    options.compilerArgs.add '-XDstringConcat=inline'
}